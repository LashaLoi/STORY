const TelegramBot = require('node-telegram-bot-api')
const { initEffects } = require('./init')
const { QUESTIONS } = require('./constants')

initEffects()

const bot = new TelegramBot(process.env.TG_TOKEN, { polling: true })

const chats = {}

const greeting = async (chatId) => {
    await bot.sendMessage(
        chatId,
        `<b>–ü—Ä–∏–≤–µ—Ç!</b> üëãüèª\n\n–ú–µ–Ω—è –∑–æ–≤—É—Ç <code>story-bot</code>, –∏ –º—ã —Å –∫–æ–º–∞–Ω–¥–æ–π —Ä–∞–¥—ã, —á—Ç–æ —Ç—ã –ø—Ä–∏—à–µ–ª(–∞) –Ω–∞ –Ω–∞—à–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –¥–∏—Å–∫—É—Å—Å–∏–∏ <b>STORY</b>!\n\n–ê –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?)`,
        { parse_mode: 'HTML' }
    )
}

const sendToCommonChannel = (info) =>
    bot.sendMessage(process.env.COMMOT_CHAT_ID, info)

const getCurrentChat = (chatId) => chats[chatId]
const increaseCurrentChatStep = (chatId) => chats[chatId].steps++

bot.on('message', async (msg) => {
    const chatId = msg.chat.id

    if (!getCurrentChat(chatId)) return

    const currentStep = chats[chatId].steps

    switch (currentStep) {
        case 0:
            if (chats[chatId].firstStep === 'init') {
                await bot.sendMessage(chatId, QUESTIONS[currentStep])

                chats[chatId].firstStep = 'active'
                return
            }

            if (chats[chatId].firstStep === 'active') {
                await bot.sendMessage(msg.chat.id, '–ó–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç?', {
                    reply_markup: JSON.stringify({
                        inline_keyboard: [
                            [
                                {
                                    text: '–î–∞',
                                    callback_data: 'firstStep-yes',
                                },
                            ],
                            [
                                {
                                    text: '–ù–µ—Ç',
                                    callback_data: 'firstStep-no',
                                },
                            ],
                        ],
                    }),
                })

                chats[chatId].currentMessage = msg.text

                // chats[chatId].firstStep = 'done'
            }

            if (chats[chatId].firstStep === 'done') {
                increaseCurrentChatStep(chatId)
            }

            return
        case 1:
            await bot.sendMessage(
                chatId,
                '–∫–∞–∫—É—é —Ç–µ–º—ã —Ç—ã –±—ã —Ö–æ—Ç–µ–ª –æ–±—Å—É–¥–∏—Ç—å –±–æ–ª—å—à–µ?'
            )

            chats[chatId].secondStep = msg.text

            increaseCurrentChatStep(chatId)
            return
        case 2:
            await bot.sendMessage(
                chatId,
                '—Ö–æ—Ç–µ–ª –±—ã —Ç—ã –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å –∫–µ–º-–Ω–∏–±—É–¥—å –ª–∏—á–Ω–æ –∏ –æ–±—Å—É–¥–∏—Ç—å —Ç–µ–º—É?'
            )

            chats[chatId].thirdStep = msg.text

            increaseCurrentChatStep(chatId)
            return
        case 3:
            await bot.sendMessage(chatId, '–∫–∞–∫ —Å —Ç–æ–±–æ–π –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è?')

            chats[chatId].foreStep = msg.text

            increaseCurrentChatStep(chatId)
            return
    }

    const user = msg.from
    const userName = `${user.first_name} ${user.last_name}`

    await bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ!')
    await sendToCommonChannel(`@${user.username} - ${userName} –ø—Ä–æ—à–µ–ª –æ–ø—Ä–æ—Å.`)

    console.log(chats[chatId])
})

bot.on('callback_query', async ({ data, message }) => {
    const opts = {
        chat_id: message.chat.id,
        message_id: message.message_id,
    }

    if (data === 'firstStep-yes') {
        await bot.editMessageText('–í–∞—à –æ—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω.', opts)

        // chats[chatId].firstStep = chats[chatId].currentMessage
    }

    if (data === 'firstStep-no') {
        await bot.editMessageText('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –µ—â–µ —Ä–∞–∑.', opts)
    }
})

const startBot = () =>
    bot.onText(/\/start/, async (msg) => {
        const chatId = msg.chat.id

        chats[chatId] = {
            steps: 0,
            firstStep: 'init',
            secondStep: 'init',
            thirdStep: 'init',
            foreStep: 'init',
        }

        await greeting(chatId)
        // await sendToCommonChannel(
        //     `@${user.username} - ${userName} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.`
        // )
    })

module.exports = { startBot }
